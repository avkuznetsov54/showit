{"remainingRequest":"/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/src/views/Home.vue","mtime":1576593393489},{"path":"/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aleksandr/Desktop/my_python/mac15/DRF_VUE_DOCKER/001/showit/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}